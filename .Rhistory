by_groupby
by_package
summarize(by_package, avg_bytes = mean(size))
summarize(by_package, mean(size))
summarize()
submit()
reset()
submit()
reset(swirl)
reset()
submit(swirl)
submit()
reset()
submit()
submit()
submit()
submit()
submit()
reset()
reset()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset()
reset()
reset()
submit()
submit()
avg_bytes = mean(size))
reset()
submit()
reset()
submit()
?n
submit()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country) ,
avg_bytes = mean(size) )
submit()
submit()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country) ,
avg_bytes = mean(size) )
submit()
packageVersion("swirl")
pack_sum <- summarise(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country) ,
avg_bytes = mean(size) )
submit()
pack_sum <- summarise(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country) ,
avg_bytes = mean(size) )
submit()
pack_sum <- summarise(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country) ,
avg_bytes = mean(size) )
pack_sum <- summarise(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country) ,
avg_bytes = mean(size)
)
submit()
submit()
library(swirl)
rm(list=ls())
swirl()
1
head(airquality)
xyplot(Ozone * Wind, airquality)
xyplot(Ozone~Wind, airquality)
xyplot(Ozone~Wind, airquality, col = "red", pch = 8, main= "Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month), airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month ), airquality, layout = c(5,1))
xyplot(Ozone~ Wind | Month, airquality, layout = c(5,1))
p <-  xyplot(Ozone~Wind,data=airquality)
print(p)
p <-  xyplot(Ozone~Wind,data=airquality)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
pathtofile("plot1.R", local = TRUE)
pathtofile("plot1.R", local(set = TRUE))
pathtofile("plot1.R", set = TRUE)
pathtofile = "plot1.R", local = TRUE)
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table( diamonds$color)
table( diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat |color*cut , diamonds)
xyplot(price~carat |color*cut , data=diamonds, strip=FALSE, pch=20, xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat |color*cut , data=diamonds, pch=20, xlab=myxlab,ylab=myylab,main=mymain)
sample(colors(), 10)
pal <- colorRamp( c("red","blue")
)
pal(0)
pal(1)
pal(seq(0,1,len=6)
)
p1<- colorRampPalette(c("red","blue"))
p1
p1(2)
p1(6)
0xcc
p2<- colorRampPalette(c("red","yellow"))
p2
p2(2)
p2(10)
showMe( p1(20))
showMe( p2(20))
showMe( p2(2))
p1
?fun
?rgb
p3<- colorRampPalette(c("blue","green"))
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
rgb( 0, .5,.5)
plot(x,y,pch = 19,col=rgb(0,.5,.5))
plot(x,y,pch = 19,col=rgb(0,.5,.5, alpha = .3))
cols<-  brewer.pal(3, "BuGn")
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col=pal(20))
image(volcano, col=pal1(20))
image(volcano, col=p1(20))
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg, col=drv)
qplot(displ,hwy,data=mpg, colors()=drv)
qplot(displ,hwy,data=mpg, color=drv)
qplot(displ,hwy,data=mpg, color=drv, geom=c("point", "smooth"))
qplot(y=hwy, x=hwy, data=mpg)
qplot(y=hwy, x=hwy, data=mpg, color=drv)
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(drv,hwy, data= mpg, geom="boxplot")
qplot(drv,hwy, data= mpg, geom="boxplot", color="manufacturer")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot( hwy,data=mpg, fill=drv)
qplot(displ,hwy,data=mpg, facets=expression,.drv=3)
qplot(displ,hwy,data=mpg, facets=expression,.3)
qplot(displ,hwy,data=mpg, facets=expression, .~drv)
qplot(displ,hwy,data=mpg, facets= .~drv)
qplot(hwy,data=mpg, facets=drv~.)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot
qplot(displ, hwy, data = mpg, geom=c("point","smooth"),facets=.~drv)
g<- ggplot( mpg,displ, hwy)
g<- ggplot( data= mpg, displ , hwy)
g<- ggplot(mpg, "displ , hwy")
g<- ggplot(aes(mpg, "displ , hwy"))
g<- ggplot(aes(mpg, displ , hwy))
g<- ggplot(aes(data=mpg, displ , hwy))
g<- ggplot(mpg,aes( displ , hwy))
summary(g)
g+geom_point()
geom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+method="lm"
g+geom_point()+geom_method("lm")
g+geom_point()+geom_smooth(lm)
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm"), facet_grid = .~drv
g+geom_point()+geom_smooth(method="lm") + facet_grid = .~drv
g+geom_point()+geom_smooth(method="lm") + facet_grid = (.~drv)
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)+ggtitle( "Swirl Rules!")
g+geom_point(3)+ color("pink")+size(4)+alpha(1/2)
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(aes(color="drv"),size=4,alpha=1/2)
g+geom_point(aes(color=(drv),size=4,alpha=1/2)
)
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point(aes(color = drv), labs(title="Swirl Rules!") labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv), labs(title="Swirl Rules!") +labs(x="Displacement", y="Hwy Mileage")
)
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2,  geom_smooth(size=4,linetype=3,method="lm",se=FALSE))
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) +  geom_smooth(size=4,linetype=3,method="lm",se=FALSE))
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) +  geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g+geom_line(0)
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+ coord_cartesian(ylim(-3,3))
g+geom_line()+ coord_cartesian(ylim(-3,3)
)
g+geom_line()+ coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds,binwidth=18497/30)
brk
counts
qplot(price, data=diamonds,binwidth=18497/30, fill=cut)
qplot(price, data=diamonds,geom="density")
qplot(price, data=diamonds,geom="density", color=cut)
qplot(carat,price, data=diamonds)
qplot(carat,price, data=diamonds, shape=cut)
qplot(carat,price, data=diamonds, color=cut)
qplot(carat,price, data=diamonds, color=cut, geom=("point","smooth"),metod="lm")
qplot(carat,price, data=diamonds, color=cut, geom="point","smooth",metod="lm")
qplot(carat,price, data=diamonds, color=cut, geom="point","smooth",method="lm")
qplot(carat,price, data=diamonds, color=cut, geom="point","smooth")
qplot(carat,price, data=diamonds, color=cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm", facets= .~cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm"+ facets= .~cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm"), facets= .~cut
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g<- ggplot(diamonds,aes(depth,price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints<- quantile(diamonds$carat,seq(0, 1,length(4), na.rm=TRUE)
)
cutpoints<- quantile(diamonds$carat,seq(0, 1,length 4), na.rm=TRUE)
cutpoints<- quantile(diamonds$carat,seq(0, 1,length =4), na.rm=TRUE)
cutpoints
diamonds$car2<- diamonds$carat, cutpoints
diamonds$car2<- diamonds$carat+ cutpoints
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g<- ggplot(aes(depth,price))
g<- ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3), facet_grid= cut ~ car2
g+geom_point(alpha=1/3), facet_grid= cut( ~ car2)
g+geom_point(alpha=1/3), facet_grid= ~car2
g<- ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method = "lm,size=3,color= "pink")
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method = "lm",size=3,color= "pink")
ggplot(diamonds, aes(carat,price), geom_boxplot(), facet_grid(. ~cut) )
ggplot(diamonds, aes(carat,price)+ geom_boxplot()+ facet_grid(. ~cut) )
ggplot(diamonds, aes(carat,price))+ geom_boxplot()+ facet_grid(. ~cut) )
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
library(swirl)
rm(list=ls())
swirl()
swirl()
library(swirl)
rm(list=ls())
swirl()
(remove.packages("swirl"))
library(swirl)
swirl()
remove.packages("swirl")
install.packages(swirl)
install.packages("swirl")
install.packages("swirl")
library(swirl)
rm(list=ls())
swirl()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
dist(dataFrame)
hclust(distxy)
hclust(distxy, hc)
hc <- hclust(distxy)
hc
plot(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=.4, col="red")
5
5
9
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix,  col= cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col="red"|"orange"|"purple", pch3, cex=2,lwd=2)
points(cx,cy,col="red"|"orange"|"purple", pch=3, cex=2,lwd=2)
points(cx,cy,col=("red"|"orange"|"purple"), pch=3, cex=2,lwd=2)
points(cx,cy,col=(|"red"|"orange"|"purple"|), pch=3, cex=2,lwd=2)
points(cx,cy,col=("red","orange","purple"), pch=3, cex=2,lwd=2)
points(cx,cy,col="red","orange","purple", pch=3, cex=2,lwd=2)
points(cx,cy,col="red", pch=3, cex=2,lwd=2)
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min)
points(x,y,pch=19,cex=2,col= cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx,newCy,col=cols1,pch=8,cex=2, lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2,2,which.min )
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans( dataFrame,centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"), pch=3, cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit( "addPatt.R" )
source( "addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu%*%matv
(matu)%*%(matv)
$matu%*%$matv
matu %*% matv
u %*% v
matu %*% t(matv)
matu %*% diag %*% t(matv)
svd(scale mat)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2
svd2$d
svd2
svd2$v[,1:2]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1
(svd1$u[,1] %*% svd1$d[1])
scalar(svd1$u[,1] %*% svd1$d[1])
*(svd1$u[,1], svd1$d[1])
a1 %*%  (svd1$u[,1] and svd1$d[1])
a1 %*%  (svd1$u[,1], svd1$d[1])
(svd1$u[,1] , svd1$d[1])%*%
a1<-(svd1$u[,1], svd1$d[1])
a1<-(svd1$u[,1]  %*% svd1$d[1])
a1<- scale (svd1$u[,1]  %*% svd1$d[1])
a1<- scale (svd1$u[,1]  * svd1$d[1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2<- vd1$u %*% diag svd1$d[1:2] %*% t(svd1$v)
a2<- (vd1$u[1:2] * diag svd1$d[1:2]) %*% t(svd1$v{1:2])
a2<- (vd1$u[1:2] * diag svd1$d[1:2]) %*% t(svd1$v{1:2])
a2<- (vd1$u[1:2] %*% diag svd1$d[1:2]) %*% t(svd1$v{1:2])
a2<- vd1$u[1:2] %*% diag svd1$d[1:2]) %*% t(svd1$v{1:2]
a2<- vd1$u[1:2] %*% diag svd1$d[1:2]) %*% t(svd1$v[1:2]
a2<- vd1$u %*% diag svd1$d[1:2]) %*% t(svd1$v)
a2<- vd1$u %*% diag svd1$d[1:2] %*% t(svd1$v)
a2<- vd1$u %*% diag(svd1$d[1:2]) %*% t(svd1$v)
a2<- vd1$u %*% diag svd1$d[1:2] %*% t(svd1$v)
a2<- vd1$u %*% diag=svd1$d[1:2] %*% t(svd1$v)
a2<- vd1$u %*% t(svd1$v)
a2<- vd1$u %*% t(svd1$v) %*% diag(svd1$d[1:2])
a2<- svd1$u[1:2] %*% diag svd1$d[1:2]) %*% t(svd1$v{1:2]
a2<- svd1$u[1:2] %*% diag svd1$d[1:2] %*% t(svd1$v{1:2]
a2<- svd1$u[1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v{1:2]
a2<- svd1$u %*% diag(svd1$d[1:2]) %*% t(svd1$v)
a2<- svd1$u %*% diag svd1$d[1:2] %*% t(svd1$v)
a2<- svd1$u %*% t(svd1$v)
a2<- svd1$u[1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage( svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2]))
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(a2)
myImage(a2)
myImage(svd1$u[,1:5] %*%  diag(svd1$d[1:5])  %*% t(svd1$v[,1:5]))
q()
pm0
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnamess<- strsplit(cnames,'|', fixed= T)
cnamess<- strsplit(cnames,'|', fixed= TRUE)
cnamess<- strsplit(cnames,"|", fixed= TRUE)
cnames<- strsplit(cnames,"|", fixed= TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
q()
install.packages("kernlab")
library(kernlab)
install.packages("kernlab", type="source")
library(kernlab)
setwd("C:\\Users\\SPIWE\\Desktop\\assignment")
library(knitr)
opts_chunk$set(echo = TRUE, results = 'hold')
library(data.table)
library(ggplot2)
total_steps_per_day <- aggregate(steps ~ date, adata, sum, na.rm=TRUE )
colnames(total_steps_per_day) <- c("date","steps")
head(total_steps_per_day)
adata <- read.csv('activity.csv', header = TRUE, sep = ",",
colClasses=c("numeric", "character", "numeric"))
adata$date <- as.Date(adata$date, format = "%Y-%m-%d")
adata$interval <- as.factor(adata$interval)
total_steps_per_day <- aggregate(steps ~ date, adata, sum, na.rm=TRUE )
colnames(total_steps_per_day) <- c("date","steps")
head(total_steps_per_day)
```
total_steps_per_day <- aggregate(steps ~ date, adata, sum, na.rm=TRUE )
colnames(total_steps_per_day) <- c("date","steps")
head(total_steps_per_day)
c.png <- ggplot(total_steps_per_day, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title="Total Steps Taken per Day",
x = "Number of Steps per Day", y = "Number of times in a day(Count)") + theme_bw()
c.png
png("c.png")
mean_steps   <- mean(total_steps_per_day$steps, na.rm=TRUE)
median_steps <- median(total_steps_per_day$steps, na.rm=TRUE)
mean_steps
median_steps
```{r}
steps_per_interval <- aggregate(adata$steps,
by = list(interval= adata$interval),
FUN=mean, na.rm=TRUE)
#convert to integers
steps_per_interval$interval <-
as.integer(levels(steps_per_interval$interval)[steps_per_interval$interval])
colnames(steps_per_interval) <- c("interval", "steps")
a.png <- ggplot(steps_per_interval, aes(x=interval, y=steps)) +
geom_line(color="red", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") + theme_bw()
a.png
a.png
mean_steps   <- mean(total_steps_per_day$steps, na.rm=TRUE)
median_steps <- median(total_steps_per_day$steps, na.rm=TRUE)
mean_steps
median_steps
steps_per_interval <- aggregate(adata$steps,
by = list(interval= adata$interval),
FUN=mean, na.rm=TRUE)
#convert to integers
steps_per_interval$interval <-
as.integer(levels(steps_per_interval$interval)[steps_per_interval$interval])
colnames(steps_per_interval) <- c("interval", "steps")
a.png <- ggplot(steps_per_interval, aes(x=interval, y=steps)) +
geom_line(color="red", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") + theme_bw()
a.png
s.png
s.png <- ggplot(steps_per_interval, aes(x=interval, y=steps)) +
geom_line(color="red", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") + theme_bw()
s.png
mean_steps   <- mean(total_steps_per_day$steps, na.rm=TRUE)
median_steps <- median(total_steps_per_day$steps, na.rm=TRUE)
mean_steps
median_steps
steps_per_interval <- aggregate(adata$steps,
by = list(interval= adata$interval),
FUN=mean, na.rm=TRUE)
steps_per_interval$interval <-
as.integer(levels(steps_per_interval$interval)[steps_per_interval$interval])
colnames(steps_per_interval) <- c("interval", "steps")
q.png <- ggplot(steps_per_interval, aes(x=interval, y=steps)) +
geom_line(color="red", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") + theme_bw()
q.png
ggplot(steps_per_interval, aes(x=interval, y=steps)) +
geom_line(color="red", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") + theme_bw()
